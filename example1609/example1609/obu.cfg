# Example configuration file. Conforms with libconfig format.
#

Example = {

  # APP functionality to enable. The default state is disabled (false)
  APP = {
    Watchdog = false;
    RSATx = false;
    RSARx = false;
    RawTx = false;
    EVWTx = false;
    SPATTx = false;
    MAPTx = false;
    SDSMTx = false;
    TIMGenericRx = false;
    OBERx = false;
    CANVState = false;
    TCClient = false;
    CANVSC3  = false;
    PosExt  = false;
    RSM = false;
    APSBSMTx = true;
  };

  RSARx = {
    # Thread wake period [ms]
    RxInterval  = 500;
  };
  
  APSBSMTx = {
    Enabled = true;
    DevID = 0x53264875;
    ApplInterval = 100;
    
    # Socket Parameters
    Socket = {
    	Port = 1551; # socket port number
    	MaxAge = 1200; # mSec 0:disbales age check
    	UdpInterval = 50; # suggested ApplInterval:UdpInterval ratio >= 2:1  
    };
  };
  
  RSATx = {
    # Transmit period [ms]
    TxInterval  = 500;

    # WSMP parameters
    WSMP = {
      PSID          = 0xE0525341;   # 0xE0'R''S''A'
      Priority      = 2;
      # If 'ChannelNumber' is not specified, the default is the 'ContinuousChanNum' value from obu.conf
      #ChannelNumber = 172;
      DataRate      = 12;           # 6MBps
      TxPower       = 24;
      ExpiryTime    = 0;            # Never
    };

    # See RoadSideAlert definition in DSRC_R36_Source.ASN

    # ITIS.ITIScodes: Mandatory, Default=0xC0DA
    TypeEvent   = 0xC0DA;

    # SEQUENCE (SIZE(1..8)) OF ITIS.ITIScodes: Optional
    Description = [
                   0x0000,
                   0x0000,
                   0x0000,
                   0x0000,
                   0x0000,
                   0x0000,
                   0x0000,
                   0x0000
                  ];

    # DE_Priority: Optional
    Priority    = 0x00;

    # DE_HeadingSlice: Optional
    Heading     = 0xFFFF;

    # DE_Extent: Optional
    Extent      = 0x05;

    # DF_FullPositionVector, Optional
    Position    = [
    #               0x12345678,  # lon (overides GPS)
    #               0x87654321   # lat (overides GPS)
                  ];

    # DE_FurtherInfoID, Optional
    FurtherInfo = "50";
  };

  // Periodic transmission of a pre-defined WSM
  RawTx = {
    NotApplicable = 0;
  };

  // Dummy CSW (Curve Speed Warning)
  TIMRx = {
    # Thread wake period [ms]
    RxInterval  = 500;
  };

  // TIM Generic
  TIMGenericRx = {
    // Max Severity
    SeverityMax = 95;
    // Min Severity
    SeverityMin = 81;
    # Matching ITIS codes
    ITISCodes = [0, 0, 0, 0, 0];
  };

  RSM = {
    # OBUs don't send RSMs
    TxInterval_ms = 0;
    # OBUs parse RSMs
    RxEnable = true;
  };

  CANVState = {
    # Thread wake period [ms]
    PollingInterval  = 500;
  };

  TCClient = {
    # Use defaults
  };

  /// Android HMI Configuration Section
  HMI = {
    // Forward Collision Warning has low, med, and high severity variants
    FCW =
      ({
          SeverityRange = [0, 85];
          // No icon or audio for low FCW to avoid distraction
          Icon = "./ui/FCW/FCW_track.gif";
          Audio = "";
          Text = "Forward Collision Warning";
       },
       {
          SeverityRange = [86, 90];
          Icon = "./ui/FCW/FCW_mid.gif";
          Audio = "./ui/FCW/FCW.wav";
          Text = "Forward Collision Warning";
       },
       {
          SeverityRange = [91, 95];
          Icon = "./ui/FCW/FCW_high.gif";
          Audio = "./ui/FCW/FCW.wav";
          Text = "Forward Collision Warning";
     });
    // Vulnerable Road User
    VRU =
      ({
          SeverityRange = [50, 255];
          Icon = "./ui/VRU/VRU.png"
          Audio = "./ui/VRU/VRU.wav";
          Text = "Vulnerable Road User";
      });
    // Emergency Electronic Brake Light
    EEBL =
      ({
          SeverityRange = [0, 255];
          Icon = "./ui/EEBL/EEBL.gif"
          Audio = "./ui/EEBL/EEBL.wav";
          Text = "BRAKE!";
      });
    // Intersection Collision Warning
    ICW =
      ({
          SeverityRange = [0, 50];
          // No icon or audio for low ICW to avoid distraction
          Icon = "";
          LeftIcon = "";
          RightIcon = "";
          Audio = "";
          LeftAudio = "";
          RightAudio = "";
          // Cohda ICW expects a %s placeholder for direction of ICW
          Text = "Oncoming %s Vehicle";
       },
       {
          SeverityRange = [51, 255];
          // ICW has left and right directional icons but can
          // also have just Icon if no direction available
          Icon = "./ui/ICW/ICW.png";
          LeftIcon = "./ui/ICW/ICW_left.gif";
          RightIcon = "./ui/ICW/ICW_right.gif";
          Audio = "./ui/highbeep.wav";
          LeftAudio = "./ui/highbeep.wav";
          RightAudio = "./ui/highbeep.wav";
          // Cohda ICW expects a %s placeholder for direction of ICW
          Text = "Oncoming %s Vehicle";
       });
    // SVA
    SVA =
      ({
          SeverityRange = [0, 255];
          Icon = "./ui/Other/Other.png"
          Audio = "./ui/ping.wav";
          Text = ""; // Use dynamic test
      });
    // BSW
    BSW =
      ({
          SeverityRange = [0, 170];//170 = Cohda_App_LCW.REC_SEVERITY_BSW
          LeftIcon = "./ui/BSW/BSW_left.png";
          RightIcon = "./ui/BSW/BSW_right.png";
          Audio = "./ui/ping.wav";
          Text = "Blind Spot Warning";
      });
    // LCW
    LCW =
      ({
          SeverityRange = [171, 255];//171 = Cohda_App_LCW.REC_SEVERITY_BSW + 1
          LeftIcon = "./ui/BSW/LCW_left.png";
          RightIcon = "./ui/BSW/LCW_right.png";
          Audio = "./ui/ping.wav";
          Text = "Lane Change Warning";
      });
    // DNPW
    DNPW =
      ({
          SeverityRange = [0, 255];
          Icon = "./ui/DNPW/DNPW.png"
          Audio = "./ui/ping.wav";
          Text = "Do not pass";
      });
    // LTA
    LTA =
      ({
          SeverityRange = [0, 255];
          Icon = "./ui/Other/Other.png"
          Audio = "./ui/highbeep.wav";
          Text = ""; // Use dynamic text
      });
    // HLW
    HLW =
      ({
          SeverityRange = [0, 190];
          Icon = "./ui/Other/Other.png"
          Audio = "./ui/Other/Other.wav";
          Text = "Warning";
      });
    // EVW
    EVW =
      ({
          SeverityRange = [50, 255];
          Icon = "./ui/EVW/EVW.png"
          Audio = "./ui/EVW/EVW.wav";
          Text = ""; // Use dynamic text
      });
    // SVW
    SVW =
      ({
          SeverityRange = [50, 255];
          Icon = "./ui/SVW/RedLightAhead.png"
          Audio = "./ui/FCW/FCW.wav";
          Text = "STOP!";
      });
    // GREEN_PHASE
    GREEN_PHASE =
      ({
          SeverityRange = [50, 250];
          Icon = "./ui/TLI/TLI_Green.png"
          Audio = "";
          Text = "";
      });
    // YELLOW_PHASE
    YELLOW_PHASE =
      ({
          SeverityRange = [50, 250];
          Icon = "./ui/TLI/TLI_Yellow.png"
          Audio = "";
          Text = "";
      });
    // RED_PHASE
    RED_PHASE =
      ({
          SeverityRange = [50, 250];
          Icon = "./ui/TLI/TLI_Red.png"
          Audio = "";
          Text = "";
      });
    // libTIMCSW.so: TIM based Curve Speed Warning
    TIMCSW =
      ({
          SeverityRange = [0, 125];
          // CSW and ICW have left and right directional icons but can
          // also have just Icon if no direction available
          Icon = "./ui/CSW/CSW_low.png";
          LeftIcon = "./ui/CSW/CSW_left_low.png";
          RightIcon = "./ui/CSW/CSW_right_low.png";
          Audio = "";
          LeftAudio = "";
          RightAudio = "";
          // Cohda CSW expects a %s placeholder for curve direction and
          // a %u placeholder for curve speed
          Text = "%ukm/h %s Curve Ahead";
       },
       {
          SeverityRange = [126, 255];
          // CSW and ICW have left and right directional icons but can
          // also have just Icon if no direction available
          Icon = "./ui/CSW/CSW_left_high.png";
          LeftIcon = "./ui/CSW/CSW_left_high.png";
          RightIcon = "./ui/CSW/CSW_right_high.png";
          Audio = "./ui/lowbeep.wav";
          LeftAudio = "./ui/lowbeep.wav";
          RightAudio = "./ui/lowbeep.wav";
          // Cohda CSW expects a %s placeholder for curve direction and
          // a %u placeholder for curve speed
          Text = "Over Speed %ukm/h on %s Curve";
      });
    // libTIMWorkZone.so: TIM based workzone (RWW)
    TIMWZA =
      ({
          SeverityRange = [0, 190];
          Icon = "./ui/RWW/RWW.png"
          Audio = "./ui/ping.wav";
          Text = "Roadwork";
      });
    // libTIMSpeed.so: TIM based speed limit
    TIMSPD =
      ({
          SeverityRange = [0, 125];
          Icon = "./ui/SpeedLimit/SpeedLimitMinor.png";
          Audio = "./ui/SpeedLimit/SpeedlimitMinor.wav";
          Text = "Speed limit";
       },
       {
          SeverityRange = [126, 255];
          Icon = "./ui/SpeedLimit/SpeedLimitMajor.png";
          Audio = "./ui/SpeedLimit/SpeedlimitMajor.wav";
          Text = "Over speed limit";
      });
    // libTIMGeneric.so
    ICE =
      ({
          SeverityRange = [0, 255];
          ITIS = 5912; // wet-and-icy-roads
          Icon = "./ui/ICE/ice.gif";
          Audio = "./ui/ICE/ice.wav";
          Text = "Icy Road Ahead";
      });
    }
};
